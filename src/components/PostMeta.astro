---
// 你的 import 保持不变
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
	pinned?: boolean;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
	pinned = false,
} = Astro.props;
const className = Astro.props.class;

// 判断是否是首页
// const isHome =
// 	Astro.url.pathname === "/" ||
// 	"2" ||
// 	"3" ||
// 	"4" ||
// 	"5" ||
// 	"6" ||
// 	"7" ||
// 	"8" ||
// 	"9" ||
// 	"10" ||
// 	"11" ||
// 	"12" ||
// 	"13" ||
// 	"14" ||
// 	"15" ||
// 	"16" ||
// 	"17" ||
// 	"18" ||
// 	"19" ||
// 	"20";

const homePaths = [
	"/",
	"/featured",
	"/featured/",
	...Array.from({ length: 20 }, (_, i) => `/${i + 1}/`),
	...Array.from({ length: 20 }, (_, i) => `/featured/${i + 1}/`),
];
const isHome = homePaths.includes(Astro.url.pathname);
---
<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
  {pinned && (
    <div class="flex items-center text-[var(--primary)]">
      <div class="meta-icon">
        <Icon name="mdi:pin" class="text-xl"></Icon>
      </div>
      <span class="text-50 text-sm font-medium">置顶</span>
    </div>
  )}
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon">
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <>
                  {i > 0 && <div class="mx-1.5 text-[var(--meta-divider)] text-sm">/</div>}
                  <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                     class="link-lg transition text-50 text-sm font-medium
                                  hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                      {tag.trim()}
                  </a>
                </>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>

    <!-- 访问量（首页不显示） -->
    {!isHome && (
        <>
          <div class="flex items-center">
              <div class="meta-icon">
                  <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
              </div>
              <span>浏览量：<span id="post-umami-pageviews">加载中...</span></span>，
              <span>访问次数：<span id="post-umami-visits">加载中...</span></span>
          </div>

          <script is:inline>
            const fetchUmamiStatss = async () => {
              const pathname = window.location.pathname;
              const shareRes = await fetch('https://eu.umami.is/api/share/2dKQ5T0WrUn6AYtr');
              const shareData = await shareRes.json();
              const token = shareData.token;
              const statsUrl = `https://eu.umami.is/api/websites/f7b1324b-9b51-4b00-bc8d-726cbed5168d/stats?` +
                new URLSearchParams({
                  startAt: '1753333200000',
                  endAt: Date.now(),
                  unit: 'hour',
                  timezone: 'Asia/Hong_Kong',
                  url: pathname,
                  compare: 'false',
                });
              const res = await fetch(statsUrl, {
                method: 'GET',
                headers: {
                  'x-umami-share-token': token,
                },
              });
              if (!res.ok) {
                document.getElementById('post-umami-pageviews').textContent = 'N/A';
                document.getElementById('post-umami-visits').textContent = 'N/A';
                return;
              }
              const data = await res.json();
              document.getElementById('post-umami-pageviews').textContent = data.pageviews?.value ?? 'N/A';
              document.getElementById('post-umami-visits').textContent = data.visits?.value ?? 'N/A';
            };
            fetchUmamiStatss();
            setInterval(fetchUmamiStatss, 5000);
          </script>
        </>
    )}
</div>
