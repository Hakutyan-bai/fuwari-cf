---
// 你的 import 保持不变
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
	pinned?: boolean;
	url?: string; // 添加 url 参数支持
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
	pinned = false,
	url // 解构 url 参数
} = Astro.props;
const className = Astro.props.class;

// 判断是否是首页
const homePaths = [
	"/",
	"/featured",
	"/featured/",
	...Array.from({ length: 20 }, (_, i) => `/${i + 1}/`),
	...Array.from({ length: 20 }, (_, i) => `/featured/${i + 1}/`),
];
const isHome = homePaths.includes(Astro.url.pathname);

// 为每个文章生成唯一的 ID
const uniqueId = url ? encodeURIComponent(url) : 'default';

// 在服务端获取 Umami 统计数据
let pageviews = '加载中...';
let visits = '加载中...';

if (url && !isHome) {
  try {
    // 获取分享令牌
    const shareRes = await fetch('https://cloud.umami.is/analytics/eu/api/share/2dKQ5T0WrUn6AYtr');
    if (shareRes.ok) {
      const shareData = await shareRes.json();
      const token = shareData.token;
      
      // 从 URL 中提取文章 slug（例如 /posts/my-article/ -> my-article）
      const slug = url.split('/').filter(Boolean).pop() || '';
      
      // 构造统计数据 URL，使用 path 参数而不是 url 参数
      const statsUrl = `https://cloud.umami.is/analytics/eu/api/websites/f7b1324b-9b51-4b00-bc8d-726cbed5168d/stats?` +
        new URLSearchParams({
          startAt: '0',
          endAt: Date.now().toString(),
          unit: 'hour',
          timezone: 'Asia/Shanghai',
          // 使用 path 参数来精确匹配文章路径
          path: `eq./posts/${slug}/`,
          compare: 'false',
        });
        
      // 获取统计数据
      const res = await fetch(statsUrl, {
        method: 'GET',
        headers: {
          'x-umami-share-token': token,
        },
      });
      
      if (res.ok) {
        const data = await res.json();
        // 根据 Umami API v2 数据结构变更的经验，直接使用数值字段
        pageviews = data.pageviews?.toString() ?? 'N/A';
        visits = data.visits?.toString() ?? 'N/A';
      }
    }
  } catch (error) {
    console.error('Error fetching Umami stats in Astro component:', error);
    pageviews = 'N/A';
    visits = 'N/A';
  }
}
---
<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]} data-url={url}>
  {pinned && (
    <div class="flex items-center text-[var(--primary)]">
      <div class="meta-icon">
        <Icon name="mdi:pin" class="text-xl"></Icon>
      </div>
      <span class="text-50 text-sm font-medium">置顶</span>
    </div>
  )}
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon">
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon">
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <>
                  {i > 0 && <div class="mx-1.5 text-[var(--meta-divider)] text-sm">/</div>}
                  <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                     class="link-lg transition text-50 text-sm font-medium
                                  hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                      {tag.trim()}
                  </a>
                </>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>

    <!-- 访问量（首页不显示） -->
    {!isHome && (
        <>
          <div class="flex items-center">
              <div class="meta-icon">
                  <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
              </div>
              <span>浏览量：<span id={`post-umami-pageviews-meta-${uniqueId}`}>{pageviews}</span></span>，
              <span>访问次数：<span id={`post-umami-visits-meta-${uniqueId}`}>{visits}</span></span>
          </div>

          <script is:inline>
            const loadUmamiScript = () => {
              return new Promise((resolve, reject) => {
                if (window.fetchShareData && window.fetchWebsiteStats) {
                  resolve();
                } else {
                  const script = document.createElement('script');
                  script.src = '/js/umami-share.js';
                  script.onload = resolve;
                  script.onerror = reject;
                  document.head.appendChild(script);
                }
              });
            };
            
            const getArticlePathname = () => {
              try {
                const container = document.currentScript ? document.currentScript.closest('.flex.flex-wrap') : null;
                if (container && container.dataset.url) {
                  return container.dataset.url;
                }
              } catch (e) {
                // Fallback to window.location.pathname
              }
              return window.location.pathname;
            };
            
            const fetchUmamiStatss = async () => {
              const pathname = getArticlePathname();
              
              try {
                await loadUmamiScript();
                
                const shareData = await window.fetchShareData('2dKQ5T0WrUn6AYtr');
                const token = shareData.token;
                
                const slug = pathname.split('/').filter(Boolean).pop() || '';
                
                const params = {
                  startAt: '0',
                  endAt: Date.now().toString(),
                  unit: 'hour',
                  timezone: 'Asia/Shanghai',
                  path: `eq./posts/${slug}/`,
                  compare: 'false',
                };
                  
                const data = await window.fetchWebsiteStats(
                  'f7b1324b-9b51-4b00-bc8d-726cbed5168d', 
                  token, 
                  params
                );
                
                const uniqueId = pathname ? encodeURIComponent(pathname) : 'default';
                
                const pageviewsElement = document.getElementById(`post-umami-pageviews-meta-${uniqueId}`);
                const visitsElement = document.getElementById(`post-umami-visits-meta-${uniqueId}`);
                
                if (!pageviewsElement || !visitsElement) {
                  return;
                }
                
                pageviewsElement.textContent = data.pageviews ?? 'N/A';
                visitsElement.textContent = data.visits ?? 'N/A';
              } catch (error) {
                const pathname = getArticlePathname();
                const uniqueId = pathname ? encodeURIComponent(pathname) : 'default';
                
                const pageviewsElement = document.getElementById(`post-umami-pageviews-meta-${uniqueId}`);
                const visitsElement = document.getElementById(`post-umami-visits-meta-${uniqueId}`);
                
                if (pageviewsElement) pageviewsElement.textContent = 'N/A';
                if (visitsElement) visitsElement.textContent = 'N/A';
              }
            };
            
            if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', fetchUmamiStatss);
            } else {
              fetchUmamiStatss();
            }
            
            setInterval(fetchUmamiStatss, 5000);
          </script>
        </>
    )}
</div>