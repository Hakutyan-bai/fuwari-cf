---
// CustomCursor.astro - 自定义鼠标光标组件
---

<!-- 直接创建光标元素，不使用容器 -->
<div id="custom-cursor" class="custom-cursor" style="
  position: fixed !important;
  pointer-events: none !important;
  z-index: 2147483647 !important;
  will-change: transform, left, top;
"></div>
<div id="custom-cursor-follower" class="custom-cursor-follower" style="
  position: fixed !important;
  pointer-events: none !important;
  z-index: 2147483646 !important;
  will-change: transform, left, top;
"></div>

<script lang="ts">
// 仅在具备精细指针且支持悬停的设备上启用（桌面端）
const isFinePointer = window.matchMedia('(hover: hover) and (pointer: fine)').matches;
const isCoarse = window.matchMedia('(hover: none), (pointer: coarse)').matches;

// 在触摸/粗指针设备上，直接退出并确保元素隐藏
if (!isFinePointer || isCoarse) {
  const c = document.getElementById('custom-cursor');
  const f = document.getElementById('custom-cursor-follower');
  if (c) c.style.display = 'none';
  if (f) f.style.display = 'none';
  // 不注入任何全局 cursor: none 样式
} else {
  // 立即隐藏所有光标 - 在任何其他代码执行之前（仅桌面端）
  document.documentElement.style.cursor = 'none';
  document.body.style.cursor = 'none';

  // 创建样式标签强制隐藏光标（仅桌面端）
  const style = document.createElement('style');
  style.textContent = `
      *, *::before, *::after, 
      html, body, 
      ::-webkit-scrollbar, 
      ::-webkit-scrollbar-thumb, 
      ::-webkit-scrollbar-track,
      ::-webkit-scrollbar-corner,
      ::-webkit-scrollbar-button {
          cursor: none !important;
      }
  `;
  document.head.appendChild(style);

  // 强制隐藏光标的函数
  function forceHideCursor() {
      document.documentElement.style.cursor = 'none';
      document.body.style.cursor = 'none';
      
      // 强制设置所有元素
      const allElements = document.querySelectorAll('*');
      allElements.forEach((element) => {
          if (element instanceof HTMLElement) {
              element.style.cursor = 'none';
          }
      });
  }

// 强制光标置顶的超级函数 - 突破stacking context版本
function forceMaxZIndex() {
    const cursor = document.getElementById('custom-cursor');
    const follower = document.getElementById('custom-cursor-follower');
    
    // 检查是否有Fancybox容器
    const fancyboxContainer = document.querySelector('.fancybox__container');
    
    if (fancyboxContainer && cursor && follower) {
        // 如果Fancybox存在，将光标移到Fancybox容器内部！
        if (!fancyboxContainer.contains(cursor)) {
            fancyboxContainer.appendChild(follower);
            fancyboxContainer.appendChild(cursor);
        }
        
        // 在Fancybox内部设置超高z-index
        cursor.style.setProperty('z-index', '9999999', 'important');
        follower.style.setProperty('z-index', '9999998', 'important');
    } else if (cursor && follower) {
        // 如果没有Fancybox，确保光标在body的最后
        if (cursor.parentElement === document.body && document.body.lastElementChild !== cursor) {
            document.body.appendChild(follower);
            document.body.appendChild(cursor);
        }
        cursor.style.setProperty('z-index', '2147483647', 'important');
        follower.style.setProperty('z-index', '2147483646', 'important');
    }
    
    // 确保position和pointer-events
    if (cursor) {
        cursor.style.setProperty('position', 'fixed', 'important');
        cursor.style.setProperty('pointer-events', 'none', 'important');
    }
    if (follower) {
        follower.style.setProperty('position', 'fixed', 'important');
        follower.style.setProperty('pointer-events', 'none', 'important');
    }
}

// 自定义鼠标光标脚本
document.addEventListener('DOMContentLoaded', function() {
    if (!isFinePointer || isCoarse) return; // 移动端不启用
    const cursor = document.getElementById('custom-cursor');
    const follower = document.getElementById('custom-cursor-follower');
    
    if (!cursor || !follower) return;
    
    // 确保光标元素初始可见且位置正确
    cursor.style.opacity = '1';
    follower.style.opacity = '0.5';
    cursor.style.display = 'block';
    follower.style.display = 'block';
    
    // 初始化z-index
    forceMaxZIndex();
    
    // 创建MutationObserver监控DOM变化（特别是Fancybox的加载）
    const zIndexObserver = new MutationObserver((mutations) => {
        let needsUpdate = false;
        mutations.forEach((mutation) => {
            // 检测是否有fancybox相关的类名变化
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const target = mutation.target;
                if (target && target.className && typeof target.className === 'string' && target.className.includes('fancybox')) {
                    needsUpdate = true;
                }
            }
            // 检测是否有新元素添加
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        const element = node;
                        if (element.className && typeof element.className === 'string' && element.className.includes('fancybox')) {
                            needsUpdate = true;
                        }
                    }
                });
            }
        });
        
        if (needsUpdate) {
            // 立即强制移动光标到Fancybox容器
            setTimeout(() => {
                forceMaxZIndex();
            }, 0);
            setTimeout(() => {
                forceMaxZIndex();
            }, 50);
            setTimeout(() => {
                forceMaxZIndex();
            }, 100);
        }
    });
    
    // 开始观察整个document
    zIndexObserver.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class', 'style']
    });
    
    // 定期强制检查（作为后备方案，但频率降低以避免影响性能）
    setInterval(forceMaxZIndex, 500);
    
    // 监听URL hash变化（Fancybox通常会改变hash）
    window.addEventListener('hashchange', () => {
        // 立即强制移动光标，多次执行确保生效
        setTimeout(() => forceMaxZIndex(), 0);
        setTimeout(() => forceMaxZIndex(), 50);
        setTimeout(() => forceMaxZIndex(), 100);
        setTimeout(() => forceMaxZIndex(), 200);
        setTimeout(() => forceMaxZIndex(), 300);
    });
    
    // 监听点击事件（用户点击图片打开Fancybox）
    document.addEventListener('click', (e) => {
        // 延迟检查是否出现了Fancybox
        setTimeout(() => {
            const fancyboxContainer = document.querySelector('.fancybox__container');
            if (fancyboxContainer) {
                forceMaxZIndex();
                setTimeout(() => forceMaxZIndex(), 50);
                setTimeout(() => forceMaxZIndex(), 100);
            }
        }, 50);
    }, true);
    
    let mouseX = 0;
    let mouseY = 0;
    let followerX = 0;
    let followerY = 0;
    let currentScale = 1;
    let targetScale = 1;
    let baseOpacity = 0.5; // 基础透明度
    let isHovering = false; // 悬停状态
    
    // 滚轮逃离效果变量
    let escapeX = 0;
    let escapeY = 0;
    let escapeForce = 0;
    let escapeDecay = 0.95; // 逃离力衰减速度
    
    // 鼠标移动事件
    document.addEventListener('mousemove', function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        // 强制隐藏光标 - 每次鼠标移动都检查
        forceHideCursor();
        
        // 主光标立即跟随
        if (cursor) {
            cursor.style.setProperty('left', mouseX + 'px', 'important');
            cursor.style.setProperty('top', mouseY + 'px', 'important');
            
            // 检查是否有Fancybox，设置对应的z-index
            const fancyboxContainer = document.querySelector('.fancybox__container');
            if (fancyboxContainer) {
                cursor.style.setProperty('z-index', '9999999', 'important');
                // 确保光标在Fancybox容器内
                if (!fancyboxContainer.contains(cursor)) {
                    fancyboxContainer.appendChild(follower);
                    fancyboxContainer.appendChild(cursor);
                }
            } else {
                cursor.style.setProperty('z-index', '2147483647', 'important');
            }
        }
        
        if (follower) {
            const fancyboxContainer = document.querySelector('.fancybox__container');
            if (fancyboxContainer) {
                follower.style.setProperty('z-index', '9999998', 'important');
            } else {
                follower.style.setProperty('z-index', '2147483646', 'important');
            }
        }
        
        // 如果没有Fancybox，每次移动都将光标元素移到DOM最后
        const fancybox = document.querySelector('.fancybox__container');
        if (!fancybox && cursor && document.body.lastElementChild !== cursor) {
            document.body.appendChild(follower);
            document.body.appendChild(cursor);
        }
    }, true); // 使用捕获阶段
    
    // 滚轮事件 - 创造逃离效果
    document.addEventListener('wheel', function(e) {
        // 不阻止默认行为，让页面正常滚动
        
        // 根据滚动方向设置逃离方向
        const scrollDirection = e.deltaY > 0 ? 1 : -1; // 向下滚动为正，向上滚动为负
        
        // 页面向下滚动时，跟随光标向上逃离；向上滚动时，向下逃离
        escapeX = (Math.random() - 0.5) * 20; // 添加一点水平随机性
        escapeY = -scrollDirection * 40; // 与滚动方向相反
        
        // 根据滚轮速度调整逃离强度
        escapeForce = Math.min(1, Math.abs(e.deltaY) / 100);
        
        // 添加一些随机性让效果更自然
        escapeX += (Math.random() - 0.5) * 15;
    }, { passive: true }); // 使用 passive: true 确保不会阻止滚动
    
    // 跟随光标的延迟动画
    function animateFollower() {
        // 逃离力衰减
        escapeX *= escapeDecay;
        escapeY *= escapeDecay;
        escapeForce *= escapeDecay;
        
        // 计算目标位置（主光标位置 + 逃离偏移）
        const targetX = mouseX + escapeX * escapeForce;
        const targetY = mouseY + escapeY * escapeForce;
        
        // 位置缓动（向目标位置移动，但会被逃离力影响）
        const positionSpeed = 0.15;
        followerX += (targetX - followerX) * positionSpeed;
        followerY += (targetY - followerY) * positionSpeed;
        
        // 缩放缓动
        const scaleSpeed = 0.1;
        currentScale += (targetScale - currentScale) * scaleSpeed;
        
        // 在逃离时稍微缩小，增加"害怕"的感觉
        const fearScale = Math.max(0.8, 1 - Math.abs(escapeForce) * 0.3);
        const finalScale = currentScale * fearScale;
        
        if (follower) {
            follower.style.setProperty('left', followerX + 'px', 'important');
            follower.style.setProperty('top', followerY + 'px', 'important');
            follower.style.setProperty('transform', `translate(-50%, -50%) scale(${finalScale})`, 'important');
            
            // 计算最终透明度（基础透明度 + 恐惧效果）
            const fearOpacity = isHovering ? 0.8 : baseOpacity;
            const finalOpacity = Math.max(0.2, fearOpacity - Math.abs(escapeForce) * 0.3);
            follower.style.setProperty('opacity', finalOpacity.toString(), 'important');
            
            // 根据是否有Fancybox设置z-index
            const fancyboxContainer = document.querySelector('.fancybox__container');
            if (fancyboxContainer) {
                follower.style.setProperty('z-index', '9999998', 'important');
            } else {
                follower.style.setProperty('z-index', '2147483646', 'important');
            }
        }
        
        // 每帧都确保主光标z-index正确
        if (cursor) {
            const fancyboxContainer = document.querySelector('.fancybox__container');
            if (fancyboxContainer) {
                cursor.style.setProperty('z-index', '9999999', 'important');
                // 确保光标在Fancybox容器内
                if (!fancyboxContainer.contains(cursor) || !fancyboxContainer.contains(follower)) {
                    fancyboxContainer.appendChild(follower);
                    fancyboxContainer.appendChild(cursor);
                }
            } else {
                cursor.style.setProperty('z-index', '2147483647', 'important');
                // 如果没有Fancybox，确保在body中
                if (cursor.parentElement !== document.body) {
                    document.body.appendChild(follower);
                    document.body.appendChild(cursor);
                }
            }
        }
        
        requestAnimationFrame(animateFollower);
    }
    
    // 开始动画循环
    animateFollower();
    
    // 强制z-index的定期检查 - 高频率确保覆盖
    setInterval(() => {
        forceHideCursor();
        forceMaxZIndex();
        
        // 额外的暴力方法：直接设置内联样式
        if (cursor) {
            cursor.setAttribute('style', 
                cursor.getAttribute('style') + 
                '; z-index: 2147483647 !important; position: fixed !important; pointer-events: none !important;'
            );
        }
        if (follower) {
            follower.setAttribute('style', 
                follower.getAttribute('style') + 
                '; z-index: 2147483646 !important; position: fixed !important; pointer-events: none !important;'
            );
        }
        
        // 确保元素在DOM最后
        if (cursor && follower) {
            if (document.body.contains(follower) && document.body.contains(cursor)) {
                document.body.appendChild(follower);
                document.body.appendChild(cursor);
            }
        }
    }, 50); // 每50毫秒强制检查一次
    
    // 鼠标进入页面时显示光标
    document.addEventListener('mouseenter', () => {
        if (cursor) cursor.style.opacity = '1';
        if (follower) follower.style.opacity = '0.5';
        forceHideCursor();
    });
    
    // 鼠标离开页面时隐藏光标
    document.addEventListener('mouseleave', () => {
        if (cursor) cursor.style.opacity = '0';
        if (follower) follower.style.opacity = '0';
    });
    
    // 为可点击元素添加悬停效果
    const clickableElements = document.querySelectorAll('a, button, input, textarea, select, [role="button"], [onclick]');
    
    clickableElements.forEach((element) => {
        element.addEventListener('mouseenter', () => {
            if (cursor) cursor.classList.add('hover');
            targetScale = 1.5;
            isHovering = true;
            forceHideCursor();
        });
        
        element.addEventListener('mouseleave', () => {
            if (cursor) cursor.classList.remove('hover');
            targetScale = 1;
            isHovering = false;
            forceHideCursor();
        });
    });
    
    // 监听动态添加的可点击元素
    const clickableObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1 && node instanceof Element) {
                    const newClickableElements = node.querySelectorAll('a, button, input, textarea, select, [role="button"], [onclick]');
                    newClickableElements.forEach((element) => {
                        element.addEventListener('mouseenter', () => {
                            if (cursor) cursor.classList.add('hover');
                            targetScale = 1.5;
                            isHovering = true;
                            forceHideCursor();
                        });
                        
                        element.addEventListener('mouseleave', () => {
                            if (cursor) cursor.classList.remove('hover');
                            targetScale = 1;
                            isHovering = false;
                            forceHideCursor();
                        });
                    });
                }
            });
        });
    });
    
    clickableObserver.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // 额外的事件监听器确保光标隐藏
    ['scroll', 'resize', 'focus', 'blur', 'click'].forEach((eventType) => {
        document.addEventListener(eventType, forceHideCursor);
    });
});
}
</script>

<style>
/* 确保光标元素可见且在最顶层 */
#custom-cursor,
#custom-cursor-follower {
    position: fixed !important;
    pointer-events: none !important;
    will-change: transform, left, top;
}

#custom-cursor {
    opacity: 1 !important;
    z-index: 2147483647 !important;
}

#custom-cursor-follower {
    opacity: 0.5 !important;
    z-index: 2147483646 !important;
}

/* 桌面端确保显示 */
@media (hover: hover) and (pointer: fine) {
    #custom-cursor {
        opacity: 1 !important;
        display: block !important;
    }
    #custom-cursor-follower {
        opacity: 0.5 !important;
        display: block !important;
    }
}
</style>
